>>> matrix_mul = __import__('100-matrix_mul').matrix_mul
>>> matrix_mul([[1, 2], [3, 4]], [[5, 6], [7, 8]])
[[19, 22], [43, 50]]
>>> try:
... 	matrix_mul([[1, 2, 1], [3, 4, 3]], [[5, 6], [7, 8]])
... except ValueError as err:
... 	print(err)
...
m_a and m_b can't be multiplied
>>> try:
...     matrix_mul("String", [[5, 6], [7, 8]])
... except TypeError as err:
...     print(err)
...
m_a must be a list
>>> try:
...     matrix_mul([[5, 6], [7, 8]], "String")
... except TypeError as err:
...     print(err)
...
m_b must be a list
>>> try:
...     matrix_mul([[5, 6], [7, 8]], [1, 2, 3, 4])
... except TypeError as err:
...     print(err)
...
m_b must be a list of lists
>>> try:
...     matrix_mul(['1', 'e', 'g'], [[5, 6], [7, 8]])
... except TypeError as err:
...     print(err)
...
m_a must be a list of lists
>>> try:
...     matrix_mul([[]], [[5, 6], [7, 8]])
... except ValueError as err:
...     print(err)
...
m_a can't be empty
>>> try:
...     matrix_mul([[5, 6], [7, 8]], [])
... except ValueError as err:
...     print(err)
...
m_b can't be empty
>>> try:
...     matrix_mul([[5, 'A'], [7, 8]], [[5, 6], [7, 'c']])
... except TypeError as err:
...     print(err)
...
m_a should contain only integers or floats
>>> try:
...     matrix_mul([[5, 3], [7, 8]], [[5, 6], [7, 'c']])
... except TypeError as err:
...     print(err)
...
m_b should contain only integers or floats
>>> try:
...     matrix_mul([[5, 8], [7, 8]], [[5, 6], [7, 3, 4]])
... except TypeError as err:
...     print(err)
...
each row of m_b must be of the same size
>>> try:
...     matrix_mul([[5, 8], [8]], [[5, 6, 3], [7, 3, 4]])
... except TypeError as err:
...     print(err)
...
each row of m_a must be of the same size
>>> try:
...     matrix_mul([[5, 8, 3], [7, 8, 1]], [[5, 6, 3], [7, 3, 4]])
... except ValueError as err:
...     print(err)
...
m_a and m_b can't be multiplied
